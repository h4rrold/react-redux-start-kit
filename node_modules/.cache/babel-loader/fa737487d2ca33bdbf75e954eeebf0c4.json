{"ast":null,"code":"import Axios from \"axios\";\n\nclass Http {\n  static getInstance() {\n    if (!Http.instance) {\n      Http.instance = new Http();\n    }\n\n    return Http.instance;\n  }\n\n  constructor() {\n    this.axiosInstance = null;\n\n    this.initializeResponseInterceptor = () => {\n      this.axiosInstance.interceptors.response.use(this.handleResponse, this.handleError);\n    };\n\n    this.handleError = error => Promise.reject(error.response);\n\n    this.handleResponse = res => res;\n\n    this.get = (url, config) => this.request({\n      method: \"GET\",\n      url,\n      ...config\n    });\n\n    this.post = (url, data, config) => this.request({\n      method: \"POST\",\n      url,\n      data,\n      ...config\n    });\n\n    this.put = (url, data, config) => this.request({\n      method: \"PUT\",\n      url,\n      data,\n      ...config\n    });\n\n    this.delete = (url, config) => this.request({\n      method: \"DELETE\",\n      url,\n      ...config\n    });\n\n    const source = Axios.CancelToken.source();\n    const _config = Http.defaultOptions;\n    this.axiosInstance = Axios.create({ ..._config,\n      cancelToken: source.token\n    });\n    this.initializeResponseInterceptor();\n  }\n\n  request(config) {\n    return this.axiosInstance.request({\n      method: config.method,\n      baseURL: config.baseURL,\n      params: config.params,\n      data: config.data,\n      url: config.url,\n      headers: config.headers,\n      responseType: config.responseType\n    });\n  }\n\n}\n\nHttp.instance = null;\nHttp.defaultOptions = {\n  baseUrl: \"\",\n  validateStatus: status => status === 200\n};\nexport const httpService = Http.getInstance();","map":{"version":3,"sources":["/Users/g4rrold/WebstormProjects/react-redux-start-kit/src/services/api/http.js"],"names":["Axios","Http","getInstance","instance","constructor","axiosInstance","initializeResponseInterceptor","interceptors","response","use","handleResponse","handleError","error","Promise","reject","res","get","url","config","request","method","post","data","put","delete","source","CancelToken","defaultOptions","create","cancelToken","token","baseURL","params","headers","responseType","baseUrl","validateStatus","status","httpService"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;;AAEA,MAAMC,IAAN,CAAW;AAUS,SAAXC,WAAW,GAAG;AACnB,QAAI,CAACD,IAAI,CAACE,QAAV,EAAoB;AAClBF,MAAAA,IAAI,CAACE,QAAL,GAAgB,IAAIF,IAAJ,EAAhB;AACD;;AACD,WAAOA,IAAI,CAACE,QAAZ;AACD;;AAEDC,EAAAA,WAAW,GAAG;AAAA,SAddC,aAcc,GAdE,IAcF;;AAAA,SAOdC,6BAPc,GAOkB,MAAM;AACpC,WAAKD,aAAL,CAAmBE,YAAnB,CAAgCC,QAAhC,CAAyCC,GAAzC,CACE,KAAKC,cADP,EAEE,KAAKC,WAFP;AAID,KAZa;;AAAA,SAcdA,WAdc,GAcCC,KAAD,IAAWC,OAAO,CAACC,MAAR,CAAeF,KAAK,CAACJ,QAArB,CAdX;;AAAA,SAgBdE,cAhBc,GAgBIK,GAAD,IAASA,GAhBZ;;AAAA,SA8BdC,GA9Bc,GA8BR,CAACC,GAAD,EAAMC,MAAN,KAAiB,KAAKC,OAAL,CAAa;AAAEC,MAAAA,MAAM,EAAE,KAAV;AAAiBH,MAAAA,GAAjB;AAAsB,SAAGC;AAAzB,KAAb,CA9BT;;AAAA,SAgCdG,IAhCc,GAgCP,CAACJ,GAAD,EAAMK,IAAN,EAAYJ,MAAZ,KACL,KAAKC,OAAL,CAAa;AAAEC,MAAAA,MAAM,EAAE,MAAV;AAAkBH,MAAAA,GAAlB;AAAuBK,MAAAA,IAAvB;AAA6B,SAAGJ;AAAhC,KAAb,CAjCY;;AAAA,SAmCdK,GAnCc,GAmCR,CAACN,GAAD,EAAMK,IAAN,EAAYJ,MAAZ,KACJ,KAAKC,OAAL,CAAa;AAAEC,MAAAA,MAAM,EAAE,KAAV;AAAiBH,MAAAA,GAAjB;AAAsBK,MAAAA,IAAtB;AAA4B,SAAGJ;AAA/B,KAAb,CApCY;;AAAA,SAsCdM,MAtCc,GAsCL,CAACP,GAAD,EAAMC,MAAN,KAAiB,KAAKC,OAAL,CAAa;AAAEC,MAAAA,MAAM,EAAE,QAAV;AAAoBH,MAAAA,GAApB;AAAyB,SAAGC;AAA5B,KAAb,CAtCZ;;AACZ,UAAMO,MAAM,GAAGzB,KAAK,CAAC0B,WAAN,CAAkBD,MAAlB,EAAf;AACA,UAAMP,OAAM,GAAGjB,IAAI,CAAC0B,cAApB;AACA,SAAKtB,aAAL,GAAqBL,KAAK,CAAC4B,MAAN,CAAa,EAAE,GAAGV,OAAL;AAAaW,MAAAA,WAAW,EAAEJ,MAAM,CAACK;AAAjC,KAAb,CAArB;AACA,SAAKxB,6BAAL;AACD;;AAaDa,EAAAA,OAAO,CAACD,MAAD,EAAS;AACd,WAAO,KAAKb,aAAL,CAAmBc,OAAnB,CAA2B;AAChCC,MAAAA,MAAM,EAAEF,MAAM,CAACE,MADiB;AAEhCW,MAAAA,OAAO,EAAEb,MAAM,CAACa,OAFgB;AAGhCC,MAAAA,MAAM,EAAEd,MAAM,CAACc,MAHiB;AAIhCV,MAAAA,IAAI,EAAEJ,MAAM,CAACI,IAJmB;AAKhCL,MAAAA,GAAG,EAAEC,MAAM,CAACD,GALoB;AAMhCgB,MAAAA,OAAO,EAAEf,MAAM,CAACe,OANgB;AAOhCC,MAAAA,YAAY,EAAEhB,MAAM,CAACgB;AAPW,KAA3B,CAAP;AASD;;AA7CQ;;AAALjC,I,CACGE,Q,GAAW,I;AADdF,I,CAKG0B,c,GAAiB;AACtBQ,EAAAA,OAAO,EAAE,EADa;AAEtBC,EAAAA,cAAc,EAAGC,MAAD,IAAYA,MAAM,KAAK;AAFjB,C;AAqD1B,OAAO,MAAMC,WAAW,GAAGrC,IAAI,CAACC,WAAL,EAApB","sourcesContent":["import Axios from \"axios\";\n\nclass Http {\n  static instance = null;\n\n  axiosInstance = null;\n\n  static defaultOptions = {\n    baseUrl: \"\",\n    validateStatus: (status) => status === 200,\n  };\n\n  static getInstance() {\n    if (!Http.instance) {\n      Http.instance = new Http();\n    }\n    return Http.instance;\n  }\n\n  constructor() {\n    const source = Axios.CancelToken.source();\n    const config = Http.defaultOptions;\n    this.axiosInstance = Axios.create({ ...config, cancelToken: source.token });\n    this.initializeResponseInterceptor();\n  }\n\n  initializeResponseInterceptor = () => {\n    this.axiosInstance.interceptors.response.use(\n      this.handleResponse,\n      this.handleError\n    );\n  };\n\n  handleError = (error) => Promise.reject(error.response);\n\n  handleResponse = (res) => res;\n\n  request(config) {\n    return this.axiosInstance.request({\n      method: config.method,\n      baseURL: config.baseURL,\n      params: config.params,\n      data: config.data,\n      url: config.url,\n      headers: config.headers,\n      responseType: config.responseType,\n    });\n  }\n\n  get = (url, config) => this.request({ method: \"GET\", url, ...config });\n\n  post = (url, data, config) =>\n    this.request({ method: \"POST\", url, data, ...config });\n\n  put = (url, data, config) =>\n    this.request({ method: \"PUT\", url, data, ...config });\n\n  delete = (url, config) => this.request({ method: \"DELETE\", url, ...config });\n}\n\nexport const httpService = Http.getInstance();\n"]},"metadata":{},"sourceType":"module"}