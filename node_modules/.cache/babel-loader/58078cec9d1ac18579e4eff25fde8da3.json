{"ast":null,"code":"import errorConfig from \"./configs\";\n\nclass ErroHandler {\n  static getInstance() {\n    if (!ErroHandler.instance) {\n      ErroHandler.instance = new ErroHandler();\n    }\n\n    return ErroHandler.instance;\n  }\n\n  constructor() {\n    this.config = null;\n    this.config = errorConfig;\n  }\n\n  getMessage(key, input) {\n    let message = \"\";\n    const configItem = this.config.find(c => c.key === key);\n\n    if (configItem) {\n      var _configItem$messages$;\n\n      message = (_configItem$messages$ = configItem === null || configItem === void 0 ? void 0 : configItem.messages[input]) !== null && _configItem$messages$ !== void 0 ? _configItem$messages$ : \"\";\n    }\n\n    return message;\n  }\n\n}\n\nErroHandler.instanse = null;\nexport const errorHandler = ErroHandler.getInstance();","map":{"version":3,"sources":["/Users/g4rrold/WebstormProjects/react-redux-start-kit/src/services/errorHandler/Handler.js"],"names":["errorConfig","ErroHandler","getInstance","instance","constructor","config","getMessage","key","input","message","configItem","find","c","messages","instanse","errorHandler"],"mappings":"AAAA,OAAOA,WAAP,MAAwB,WAAxB;;AAEA,MAAMC,WAAN,CAAkB;AAIE,SAAXC,WAAW,GAAG;AACnB,QAAI,CAACD,WAAW,CAACE,QAAjB,EAA2B;AACzBF,MAAAA,WAAW,CAACE,QAAZ,GAAuB,IAAIF,WAAJ,EAAvB;AACD;;AACD,WAAOA,WAAW,CAACE,QAAnB;AACD;;AAEDC,EAAAA,WAAW,GAAG;AAAA,SATdC,MASc,GATL,IASK;AACZ,SAAKA,MAAL,GAAcL,WAAd;AACD;;AAEDM,EAAAA,UAAU,CAACC,GAAD,EAAMC,KAAN,EAAa;AACrB,QAAIC,OAAO,GAAG,EAAd;AACA,UAAMC,UAAU,GAAG,KAAKL,MAAL,CAAYM,IAAZ,CAAkBC,CAAD,IAAOA,CAAC,CAACL,GAAF,KAAUA,GAAlC,CAAnB;;AACA,QAAIG,UAAJ,EAAgB;AAAA;;AACdD,MAAAA,OAAO,4BAAGC,UAAH,aAAGA,UAAH,uBAAGA,UAAU,CAAEG,QAAZ,CAAqBL,KAArB,CAAH,yEAAkC,EAAzC;AACD;;AACD,WAAOC,OAAP;AACD;;AAtBe;;AAAZR,W,CACGa,Q,GAAW,I;AAwBpB,OAAO,MAAMC,YAAY,GAAGd,WAAW,CAACC,WAAZ,EAArB","sourcesContent":["import errorConfig from \"./configs\";\n\nclass ErroHandler {\n  static instanse = null;\n  config = null;\n\n  static getInstance() {\n    if (!ErroHandler.instance) {\n      ErroHandler.instance = new ErroHandler();\n    }\n    return ErroHandler.instance;\n  }\n\n  constructor() {\n    this.config = errorConfig;\n  }\n\n  getMessage(key, input) {\n    let message = \"\";\n    const configItem = this.config.find((c) => c.key === key);\n    if (configItem) {\n      message = configItem?.messages[input] ?? \"\";\n    }\n    return message;\n  }\n}\n\nexport const errorHandler = ErroHandler.getInstance();\n"]},"metadata":{},"sourceType":"module"}