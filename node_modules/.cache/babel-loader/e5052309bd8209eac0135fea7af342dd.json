{"ast":null,"code":"import { loginUserRequest, loginUserSuccess, loginUserFailure } from \"store/actionsCreators/auth/userLogin\";\nimport { registerUserRequest, registerUserSuccess, registerUserFailure } from \"store/actionsCreators/auth/userRegister\";\nimport { loginRequest, registerRequest } from \"services/api\";\nimport { errorHandler } from \"services/errorHandler/Handler\";\nimport { push } from \"connected-react-router\";\n\nfunction loginUserRequestThunk({\n  email,\n  password\n}) {\n  return async dispatch => {\n    dispatch(loginUserRequest());\n\n    try {\n      const response = await loginRequest({\n        email,\n        password\n      });\n\n      if (response.status === 200) {\n        const {\n          data\n        } = response;\n        dispatch(loginUserSuccess(data));\n        dispatch(push(\"/\"));\n      }\n    } catch (error) {\n      const {\n        data: {\n          message\n        }\n      } = error;\n      const handledMessage = errorHandler.getMessage(\"auth\", message);\n      dispatch(loginUserFailure(handledMessage));\n    }\n  };\n}\n\nfunction registerUserRequestThunk({\n  email,\n  password\n}) {\n  return async dispatch => {\n    debugger;\n    dispatch(registerUserRequest());\n\n    try {\n      const response = await registerRequest({\n        email,\n        password\n      });\n\n      if (response.status === 200) {\n        const {\n          data\n        } = response;\n        dispatch(registerUserSuccess(data));\n        dispatch(push(\"/\"));\n      }\n    } catch (error) {\n      const {\n        data: {\n          message\n        }\n      } = error;\n      const handledMessage = errorHandler.getMessage(\"auth\", message);\n      dispatch(registerUserFailure(handledMessage));\n    }\n  };\n}\n\nexport { loginUserRequestThunk, registerUserRequestThunk };","map":{"version":3,"sources":["/Users/g4rrold/WebstormProjects/react-redux-start-kit/src/store/thunks/auth/index.js"],"names":["loginUserRequest","loginUserSuccess","loginUserFailure","registerUserRequest","registerUserSuccess","registerUserFailure","loginRequest","registerRequest","errorHandler","push","loginUserRequestThunk","email","password","dispatch","response","status","data","error","message","handledMessage","getMessage","registerUserRequestThunk"],"mappings":"AAAA,SACEA,gBADF,EAEEC,gBAFF,EAGEC,gBAHF,QAIO,sCAJP;AAKA,SACEC,mBADF,EAEEC,mBAFF,EAGEC,mBAHF,QAIO,yCAJP;AAKA,SAASC,YAAT,EAAuBC,eAAvB,QAA8C,cAA9C;AACA,SAASC,YAAT,QAA6B,+BAA7B;AACA,SAASC,IAAT,QAAqB,wBAArB;;AAEA,SAASC,qBAAT,CAA+B;AAAEC,EAAAA,KAAF;AAASC,EAAAA;AAAT,CAA/B,EAAoD;AAClD,SAAO,MAAOC,QAAP,IAAoB;AACzBA,IAAAA,QAAQ,CAACb,gBAAgB,EAAjB,CAAR;;AACA,QAAI;AACF,YAAMc,QAAQ,GAAG,MAAMR,YAAY,CAAC;AAAEK,QAAAA,KAAF;AAASC,QAAAA;AAAT,OAAD,CAAnC;;AACA,UAAIE,QAAQ,CAACC,MAAT,KAAoB,GAAxB,EAA6B;AAC3B,cAAM;AAAEC,UAAAA;AAAF,YAAWF,QAAjB;AACAD,QAAAA,QAAQ,CAACZ,gBAAgB,CAACe,IAAD,CAAjB,CAAR;AACAH,QAAAA,QAAQ,CAACJ,IAAI,CAAC,GAAD,CAAL,CAAR;AACD;AACF,KAPD,CAOE,OAAOQ,KAAP,EAAc;AACd,YAAM;AACJD,QAAAA,IAAI,EAAE;AAAEE,UAAAA;AAAF;AADF,UAEFD,KAFJ;AAGA,YAAME,cAAc,GAAGX,YAAY,CAACY,UAAb,CAAwB,MAAxB,EAAgCF,OAAhC,CAAvB;AACAL,MAAAA,QAAQ,CAACX,gBAAgB,CAACiB,cAAD,CAAjB,CAAR;AACD;AACF,GAhBD;AAiBD;;AAED,SAASE,wBAAT,CAAkC;AAAEV,EAAAA,KAAF;AAASC,EAAAA;AAAT,CAAlC,EAAuD;AACrD,SAAO,MAAOC,QAAP,IAAoB;AACzB;AACAA,IAAAA,QAAQ,CAACV,mBAAmB,EAApB,CAAR;;AACA,QAAI;AACF,YAAMW,QAAQ,GAAG,MAAMP,eAAe,CAAC;AAAEI,QAAAA,KAAF;AAASC,QAAAA;AAAT,OAAD,CAAtC;;AACA,UAAIE,QAAQ,CAACC,MAAT,KAAoB,GAAxB,EAA6B;AAC3B,cAAM;AAAEC,UAAAA;AAAF,YAAWF,QAAjB;AACAD,QAAAA,QAAQ,CAACT,mBAAmB,CAACY,IAAD,CAApB,CAAR;AACAH,QAAAA,QAAQ,CAACJ,IAAI,CAAC,GAAD,CAAL,CAAR;AACD;AACF,KAPD,CAOE,OAAOQ,KAAP,EAAc;AACd,YAAM;AACJD,QAAAA,IAAI,EAAE;AAAEE,UAAAA;AAAF;AADF,UAEFD,KAFJ;AAGA,YAAME,cAAc,GAAGX,YAAY,CAACY,UAAb,CAAwB,MAAxB,EAAgCF,OAAhC,CAAvB;AACAL,MAAAA,QAAQ,CAACR,mBAAmB,CAACc,cAAD,CAApB,CAAR;AACD;AACF,GAjBD;AAkBD;;AAED,SAAST,qBAAT,EAAgCW,wBAAhC","sourcesContent":["import {\n  loginUserRequest,\n  loginUserSuccess,\n  loginUserFailure,\n} from \"store/actionsCreators/auth/userLogin\";\nimport {\n  registerUserRequest,\n  registerUserSuccess,\n  registerUserFailure,\n} from \"store/actionsCreators/auth/userRegister\";\nimport { loginRequest, registerRequest } from \"services/api\";\nimport { errorHandler } from \"services/errorHandler/Handler\";\nimport { push } from \"connected-react-router\";\n\nfunction loginUserRequestThunk({ email, password }) {\n  return async (dispatch) => {\n    dispatch(loginUserRequest());\n    try {\n      const response = await loginRequest({ email, password });\n      if (response.status === 200) {\n        const { data } = response;\n        dispatch(loginUserSuccess(data));\n        dispatch(push(\"/\"));\n      }\n    } catch (error) {\n      const {\n        data: { message },\n      } = error;\n      const handledMessage = errorHandler.getMessage(\"auth\", message);\n      dispatch(loginUserFailure(handledMessage));\n    }\n  };\n}\n\nfunction registerUserRequestThunk({ email, password }) {\n  return async (dispatch) => {\n    debugger;\n    dispatch(registerUserRequest());\n    try {\n      const response = await registerRequest({ email, password });\n      if (response.status === 200) {\n        const { data } = response;\n        dispatch(registerUserSuccess(data));\n        dispatch(push(\"/\"));\n      }\n    } catch (error) {\n      const {\n        data: { message },\n      } = error;\n      const handledMessage = errorHandler.getMessage(\"auth\", message);\n      dispatch(registerUserFailure(handledMessage));\n    }\n  };\n}\n\nexport { loginUserRequestThunk, registerUserRequestThunk };\n"]},"metadata":{},"sourceType":"module"}